1，
深度：根的深度是0， n1的深度就是 根 到n1的唯一路径的长
高度：叶子节点的高度是0， n1的高度是从n1到一片叶子的最长的路径长，

路径：从节点 n1 到 n2中所经历的边数目

2,遍历方式
前 中 后

层级，
深度

3，二叉查找树
左 小于根  ，
右 大于根，

参考类： ChazhaoTree.java

重点是删除：
1，删除节点 没有儿子， 直接删除
2，删除节点 有一个儿子节点， 直接儿子节点进行替换
3，删除节点有两个子节点时，

查找右子树的最小节点，来替代改删除的节点，

删除标记：懒删除方式

一个预先排好序的数据，树就是一个连续的没有左子树的，
要添加一个平衡的附加条件来处理，

任何节点的深度均不得过深，

4，AVL 树， 是带有平衡条件的，
保证了树的深度是O(logN)

保证左右子树具有 高度差不超过1，

这个不仅仅是根节点平衡，是要求每个节点的左右子树高度都是最多差1









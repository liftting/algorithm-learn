1，
深度：根的深度是0， n1的深度就是 根 到n1的唯一路径的长
高度：叶子节点的高度是0， n1的高度是从n1到一片叶子的最长的路径长，

路径：从节点 n1 到 n2中所经历的边数目

2,遍历方式
前 中 后

层级，
深度

3，二叉查找树
左 小于根  ，
右 大于根，

参考类： ChazhaoTree.java

重点是删除：
1，删除节点 没有儿子， 直接删除
2，删除节点 有一个儿子节点， 直接儿子节点进行替换
3，删除节点有两个子节点时，

查找右子树的最小节点，来替代改删除的节点，

删除标记：懒删除方式

一个预先排好序的数据，树就是一个连续的没有左子树的，
要添加一个平衡的附加条件来处理，

任何节点的深度均不得过深，

4，AVL 树， 是带有平衡条件的，
保证了树的深度是O(logN)

保证左右子树具有 高度差不超过1，

这个不仅仅是根节点平衡，是要求每个节点的左右子树高度都是最多差1


5, 扩展树，

动态查找树主要有：
二叉查找树（Binary Search Tree），
平衡二叉查找树（Balanced Binary Search Tree），
红黑树(Red-Black Tree )，B-tree/B+-tree/ B*-tree (B~Tree)。
前三者是典型的二叉查找树结构，其查找的时间复杂度O(log2N)与树的深度相关，那么降低树的深度自然会提高查找效率

1）多路查找树，是为了磁盘或其它存储设备而设计的一种多叉（下面你会看到，相对于二叉，B树每个内结点有多个分支，即多叉）平衡查找树
B-树，就是B树，翻译过来的B-tree
B+树，B*树，

这个应用场景主要是数据库中，加快查找效率，

2）B树分支节点很多，高度就能降低很多，


6,多路查找树， 每一个节点有多个孩子个数（多于两个），并且每个节点可以存储多个元素值

2-3树： 每个节点包含两个 三个孩子节点
两个孩子节点：存储的元素个数是一
三个孩子节点：（要么有3个子节点，要么没有孩子节点0） 存储的元素个数2个，一小 一大，

所有叶子节点在同一层级上：因为这个性质导致，插入删除时要考虑平衡性，
参考：pdf


// 后面都是这个2-3 树的扩展，
2-3-4树：

B树：

B+树：








